<?xml-stylesheet type="text/xsl" href="N:\HOME\TestTeam\StyleGuide\ErrorLogV100.xsl"?>

<logFile version="1.0.0" FileVersion="2.1">
    <testDesciption file="APV\SCALEXIO_FlexRay_Plugin\TC00001.LOG.txt" name="Default Configuration Test" author="ChristophSchniedermeier; rtitest; VM-User; Administrator" changedate="23.1.2013" version="1.00.00" time="23/01/2013 09:27:21.802" descriptionValue="Default Configuration Test&#xA;&#xA;&#xA;About this test:&#xA;The default configuration of a FlexRay function block should have only the specified values, functions and ports.&#xA;&#xA;&#xA;Additional Info:&#xA; - Times in Minutes:&#xA;   - 00:00:00 Preparation&#xA;   - 00:00:00 Run Time&#xA;   - 00:00:00 Total Time&#xA;&#xA;&#xA;&#xA;Content:&#xA;- I        - 001 - About this test&#xA;- P:002 - Initialize&#xA;- LP:003 - Make Testcase Folder&#xA;- LSC:008 - ConfigurationDesk: Start + Project + Application&#xA;- LP:009 - ConfigurationDesk add FlexRay function block&#xA;- Q:007 - Verify the properties&#xA;- F:004 - --Finally Step Marker here--&#xA;- LP:006 - ConfigurationDesk stop&#xA;"/>
    <referenceLinks/>
    <entry result="-1" id="" time="2013/01/23 09:27:21.876">
        <log>Started external using python.exe</log>
    </entry>
    <entry result="-1" id="" time="2013/01/23 09:27:21.921">
        <log>CTest V2.00.01 (2.00.02)</log>
    </entry>
    <entry result="-1" id="" time="2013/01/23 09:27:21.967">
        <log>Startdir   :E:\MKS_TS\flexray\TestInstructions\TestButler</log>
    </entry>
    <entry result="-1" id="" time="2013/01/23 09:27:22.026">
        <log>Workingdir :E:\MKS_TS\flexray\TestInstructions\TestButler</log>
    </entry>
    <statement></statement>
    <entry result="-1" id="" time="2013/01/23 09:27:22.109">
        <log>SQSTestParser Version 2.07.18</log>
    </entry>
    <entry result="-1" id="1" time="2013/01/23 09:27:24.389" type="info">
        <log>About this test</log>
        <stepvalue>The default configuration of a FlexRay function block should have only the specified values, functions, ports and properties.

This is being verified automatically by comparing Sub-Items and their properties to their previously recorded values and types.</stepvalue></entry><entry result="-1" id="3" time="2013/01/23 09:27:24.446" type="Library:executePython"><log>Execute Python: Make Testcase Folder</log><stepvalue>Library: _Libraries\Utilities
StepID: 2

import os
import shutil

TestcaseFolder = os.path.join(r"E:\MKS_TS\flexray\TestData", "TEMP", "TC00001")

# Remove Testcase Folder if it already exists
if os.path.exists(TestcaseFolder):
    try:
        shutil.rmtree(TestcaseFolder)
    except Exception, e:
        Logging("Unable to remove existing Testcase Folder (%s)" % TestcaseFolder, BLOCKED)

# Make Testcase Folder
try:
    os.makedirs(TestcaseFolder)
except Exception, e:
    Logging("Unable to make Testcase Folder (%s)" % TestcaseFolder, BLOCKED)</stepvalue>
    </entry>
    <entry result="-1" id="22" time="2013/01/23 09:27:34.219" type="Library:executePython">
        <log>Execute Python: Matlab start</log>
        <stepvalue>Library: _Libraries\Matlab
StepID: 2

from win32com.client import Dispatch

Matlab = Dispatch("Matlab.Application")</stepvalue>
    </entry>
    <entry result="-1" id="8.3" time="2013/01/23 09:27:54.234" type="Library:executePython">
        <log>Execute Python: ConfigurationDesk start</log>
        <stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 2

from win32com.client import Dispatch
from win32com.client import Enums

ConfigurationDesk = Dispatch("ConfigurationDesk.Application")

if not ConfigurationDesk:
    Logging("Unable to start ConfigurationDesk!", BLOCKED)

ConfigurationDeskEnums = Enums(ConfigurationDesk)

# ConfigurationDesk starts windowless if started via automation.
ConfigurationDesk.MainWindow.Visible = True
ConfigurationDesk.MainWindow.State = ConfigurationDeskEnums.MainWindowState.Maximized</stepvalue></entry><entry result="-1" id="8.4" time="2013/01/23 09:27:54.389" type="Library:executePython"><log>Execute Python: ConfigurationDesk set ProjectRoot</log><stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 4

ProjectRoots = ConfigurationDesk.ProjectRoots

for ProjectRoot in ProjectRoots:
	ProjectRoot.Remove()

try:
	ProjectRootPath
except:
	ProjectRootPath = TestcaseFolder

ProjectRoot = ProjectRoots.Add(ProjectRootPath)

ProjectRoot.Activate()</stepvalue></entry><entry result="-1" id="8.6" time="2013/01/23 09:27:54.594" type="Library:executePython"><log>Execute Python: ConfigurationDesk add Project</log><stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 6

try:
	ProjectName
except:
	ProjectName = "TestProject"

Project = ConfigurationDesk.Projects.Add(ProjectName)</stepvalue></entry><entry result="-1" id="8.7" time="2013/01/23 09:27:59.911" type="Library:executePython"><log>Execute Python: ConfigurationDesk add Application</log><stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 7

try:
	ApplicationName
except:
	ApplicationName = "TestApplication"

try:
	AutoSaveActiveApplication
except:
	AutoSaveActiveApplication = True

Application = Project.Applications.Add(ApplicationName, AutoSaveActiveApplication)</stepvalue></entry><entry result="-1" id="9" time="2013/01/23 09:28:01.193" type="Library:executePython"><log>Execute Python: ConfigurationDesk add FlexRay function block</log><stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 8

FunctionLibrary = Application.Components["IOFunctionLib"]["Function Library"]

FlexRayFunction = FunctionLibrary["FlexRay"]

FlexRayObjectType = FlexRayFunction.DataObjectTypes[0]

FunctionBlock = FlexRayFunction.CreateChild(FlexRayObjectType)
FunctionBlock.IsInApplication = True

KeyWords.update({"FUNCTION_BLOCK_NAME" : FunctionBlock.Name})</stepvalue></entry><entry result="1" id="10" time="2013/01/23 09:28:12.037"><log>Expected property not found ('RatedCurrentRelative')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:12.155"><log>Expected property not found ('RatedCurrent')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:12.244"><log>Expected property not found ('CompareMode')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:12.329"><log>Expected property not found ('LoadDescription')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:15.088"><log>Expected property not found ('RatedCurrentRelative')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:15.194"><log>Expected property not found ('RatedCurrent')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:15.284"><log>Expected property not found ('CompareMode')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:15.370"><log>Expected property not found ('LoadDescription')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.148"><log>Expected property not found ('RatedCurrentRelative')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.256"><log>Expected property not found ('RatedCurrent')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.364"><log>Expected property not found ('CompareMode')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.473"><log>Expected property not found ('LoadDescription')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.564"><log>Expected property not found ('IsOpenCircuitAllowed')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.652"><log>Expected property not found ('IsShortToGndAllowed')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.775"><log>Expected property not found ('IsShortToVbatAllowed')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.882"><log>Expected property not found ('IsShortToSignalGenerationChannelAllowed')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:18.970"><log>Expected property not found ('IsShortToSignalMeasurementChannelAllowed')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:19.059"><log>Expected property not found ('IsShortToBusChannelAllowed')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:19.147"><log>Expected property not found ('IsDropBusSignal')!</log></entry><entry result="1" id="10" time="2013/01/23 09:28:19.248"><log>Expected property not found ('IsLoadRejectionEnabled')!</log></entry><entry result="-1" id="10" time="2013/01/23 09:28:26.545" type="executePython"><log>Execute Python: Verify Properties</log><stepvalue>ExpectedProperties = [
    ("Name", "FlexRay (1)", False),
    ("InitialValueUsage", 2, False),
    ("IsSystemValuesSaturationEnabled", False, False),
    ("StoppedStatusOutput", 2, False),
    ("ControllerCount", 1, False),
    ("UsedChannels", 1, False),
    ("InitialCyclicCommunicationChA", 2, False),
    ("InitialCyclicCommunicationChB", 2, True),
    ("InitialEventCommunicationChA", 2, False),
    ("InitialEventCommunicationChB", 2, True),
    ("DLVSynchronizationTask", 1, False),
    ("DLVApplicationCommunicationTask", 1, False),
    ("InitialSyncServiceEnable", True, False),
    ("InitialTaskExecutionEnable", True, False),
    ("InitialExecTasksWithSyncOnly", True, False),
    ("StartupSyncMode", 1, False),
    ("ConfigurationID", 0, True),
    ("FRCTProjectName", "", True),
    ("GenerationToolName", "", True),
    ("GenerationToolVersion", "", True),
    ("MFileName", "", True),
    ("GenerationTime", "", True),
    ("ClusterDescriptionFileName", "", True),
    ("ClusterDescriptionFileDate", "", True),
    ("ClusterDescriptionLongName", "", True),
    ("ClusterDescriptionRevisionLabel", "", True),
    {
        "FR CTR0":[
            ("Name", "FR CTR0", True),
            ("AssignedChannelSet", "", False),
            ("MaximumCurrent", "None", True),
            ("MaximumVoltage", "None", True),
            ("ReferencePotential", "None", True),
            ("IsFuseRequired", "None", True),
            ("IsFailureSimulationEnabled", False, False),
            {
                "FR CTR0 ChA":[
                    ("Name", "FR CTR0 ChA", True),
                    {
                        "A+":[
                            ("Name", "A+", True),
                            ("PortType", 4, True),
                            ("AssignedPins", "", True),
                            ("Role", 1, True),
                            ("RatedCurrentRelative", "None", True),
                            ("RatedCurrent", "None", True),
                            ("CompareMode", "None", True),
                            ("LoadDescription", "None", True),
                            ("IsOpenCircuitAllowed", False, True),
                            ("IsShortToGndAllowed", False, True),
                            ("IsShortToVbatAllowed", False, True),
                            ("IsShortToSignalGenerationChannelAllowed", False, True),
                            ("IsShortToSignalMeasurementChannelAllowed", False, True),
                            ("IsShortToBusChannelAllowed", False, True),
                            ("IsDropBusSignal", "None", True),
                            ("IsLoadRejectionEnabled", "None", True),
                            {
                            },
                        ],
                        "A-":[
                            ("Name", "A-", True),
                            ("PortType", 4, True),
                            ("AssignedPins", "", True),
                            ("Role", 6, True),
                            ("RatedCurrentRelative", "None", True),
                            ("RatedCurrent", "None", True),
                            ("CompareMode", "None", True),
                            ("LoadDescription", "None", True),
                            ("IsOpenCircuitAllowed", False, True),
                            ("IsShortToGndAllowed", False, True),
                            ("IsShortToVbatAllowed", False, True),
                            ("IsShortToSignalGenerationChannelAllowed", False, True),
                            ("IsShortToSignalMeasurementChannelAllowed", False, True),
                            ("IsShortToBusChannelAllowed", False, True),
                            ("IsDropBusSignal", "None", True),
                            ("IsLoadRejectionEnabled", "None", True),
                            {
                            },
                        ],
                        "GndA":[
                            ("Name", "GndA", True),
                            ("PortType", 1, True),
                            ("AssignedPins", "", True),
                            ("Role", 3, True),
                            ("RatedCurrentRelative", "None", True),
                            ("RatedCurrent", "None", True),
                            ("CompareMode", "None", True),
                            ("LoadDescription", "None", True),
                            ("IsOpenCircuitAllowed", False, True),
                            ("IsShortToGndAllowed", False, True),
                            ("IsShortToVbatAllowed", False, True),
                            ("IsShortToSignalGenerationChannelAllowed", False, True),
                            ("IsShortToSignalMeasurementChannelAllowed", False, True),
                            ("IsShortToBusChannelAllowed", False, True),
                            ("IsDropBusSignal", "None", True),
                            ("IsLoadRejectionEnabled", "None", True),
                            {
                            },
                        ],
                    },
                ],
            },
        ],
        "FlexRay":[
            ("Name", "FlexRay", True),
            {
                "Configuration":[
                    ("Name", "Configuration", True),
                    ("PortType", 2, True),
                    {
                    },
                ],
            },
        ],
        "Common Functions":[
            ("Name", "Common Functions", True),
            ("ComCyclicControlChAFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("ComCyclicControlChBFunction", "&lt;COMObject &lt;unknown&gt;&gt;", True),
            ("ComCyclicControlChABFunction", "&lt;COMObject &lt;unknown&gt;&gt;", True),
            ("ComEventControlChAFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("ComEventControlChBFunction", "&lt;COMObject &lt;unknown&gt;&gt;", True),
            ("ComEventControlChABFunction", "&lt;COMObject &lt;unknown&gt;&gt;", True),
            ("CommonStatusChAFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("CommonStatusChBFunction", "&lt;COMObject &lt;unknown&gt;&gt;", True),
            ("ErrorHookStatusFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("MembershipsFunctions", "&lt;COMObject &lt;unknown&gt;&gt;", True),
            ("SynchronizationTaskFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("TimeTableControlFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            {
            },
        ],
        "CTR0":[
            ("Name", "CTR0", True),
            ("TerminationChA", 2, False),
            ("TerminationChB", 2, False),
            ("FeedThroughChA", False, False),
            ("FeedThroughChB", False, False),
            ("InhibitColdStart", False, False),
            ("MembershipId", "", True),
            ("BufferCount", 0, True),
            ("UsedBuffer", 0, True),
            ("IsSync", False, True),
            ("IsStartup", False, True),
            ("ResetFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("StatusFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("StopAndRestartFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("WakeupPatternChAFunction", "&lt;COMObject &lt;unknown&gt;&gt;", False),
            ("WakeupPatternChBFunction", "&lt;COMObject &lt;unknown&gt;&gt;", True),
            {
            },
        ],
    },
]

def PropertyCheck(Block, Property):
    if not Block.Properties.Contains(Property[0]):
        Logging("Expected property not found (`%s`)!" % (Property[0]), FAIL)
    else:
        if not str(Block.Properties[Property[0]].Value) == str(Property[1]):
            Logging("Unexpected value for property `%s` (got `%s`, expected `%s`)!" % (
                Property[0], Block.Properties[Property[0]].Value, Property[1]), FAIL)
        if not Block.Properties[Property[0]].IsReadOnly == Property[2]:
            Logging("Unexpected readability for property `%s` (got `%s`, expected `%s`)!" % (
                Property[0], Block.Properties[Property[0]].IsReadOnly, Property[2]), FAIL)


def CheckWalk(Properties, Block):
    for Property in Properties:
        if isinstance(Property, tuple):
            PropertyCheck(Block, Property)
        elif isinstance(Property, dict):
            for ChildName, ChildProperties in Property.iteritems():
                try:
                    CheckWalk(ChildProperties, Block[ChildName])
                except:
                    Logging("Child `%s` not found!" % (ChildName), FAIL)

CheckWalk(ExpectedProperties, FunctionBlock)

def Walk(Block, depth=0):
    print "    " * depth + "\"%s\":[" % (Block.Name)
    for Property in Block.Properties:
        if isinstance(Property.Value, int) or isinstance(Property.Value, bool):
            print "    " * (depth + 1) + "(\"%s\", %s, %s)," % (Property.Name, Property.Value, Property.IsReadOnly)
        else:
            print "    " * (depth + 1) + "(\"%s\", \"%s\", %s)," % (Property.Name, Property.Value, Property.IsReadOnly)
    print "    " * (depth + 1) + "{"
    for Child in Block:
        Walk(Child, depth = depth + 2)
    print "    " * (depth + 1) + "},"
    print "    " * depth + "],"

#Walk(FunctionBlock)</stepvalue></entry><entry result="-1" id="15" time="2013/01/23 09:28:26.662" type="executePython"><log>Execute Python: Set ModelPath</log><stepvalue>import os
ModelPath = os.path.join(r"E:\MKS_TS\flexray\TestData", "Models", "ConfigId0_ChA", "ConfigId0_ChA.mdl")</stepvalue></entry><entry result="-1" id="17" time="2013/01/23 09:28:26.757"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\ConfigId0_ChA.mdl` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\ConfigId0_ChA.mdl`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:26.845"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\ConfigId0_ChA.prj` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\ConfigId0_ChA.prj`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:26.926"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\ConfigId0_ChA_data.m` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\ConfigId0_ChA_data.m`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.010"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\ConfigId0_Test_ChA.prj` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\ConfigId0_Test_ChA.prj`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.088"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\demoCrcFile.c` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\demoCrcFile.c`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.177"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\expswcfg` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\expswcfg`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.240"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\expswcfg\ConfigId0_ChA_expSWCfg.xml` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\expswcfg\ConfigId0_ChA_expSWCfg.xml`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.316"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\expswcfg\project.pj` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\expswcfg\project.pj`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.382"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.465"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\CTR0.c` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\CTR0.c`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.525"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\CTR1.c` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\CTR1.c`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.579"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\dSPACENode.trc` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\dSPACENode.trc`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.631"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\dSPACENodePDU.trc` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\dSPACENodePDU.trc`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.688"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\dSPACENode_ftcl.c` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\dSPACENode_ftcl.c`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.779"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\dSPACENode_ftcl.h` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\dSPACENode_ftcl.h`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.837"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\dSPACENode_ftcl_api.c` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\dSPACENode_ftcl_api.c`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.889"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\dSPACENode_ftcl_msg_api.c` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\dSPACENode_ftcl_msg_api.c`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.942"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\flexraycom\project.pj` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\flexraycom\project.pj`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:27.992"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\pdu_test_fibex20.xml` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\pdu_test_fibex20.xml`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:28.067"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\pdu_test_fibex20.xml.backup` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\pdu_test_fibex20.xml.backup`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:28.133"><log>Copy `E:\MKS_TS\flexray\TestData\Models\ConfigId0_ChA\project.pj` to `E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\project.pj`.</log></entry><entry result="-1" id="17" time="2013/01/23 09:28:28.184" type="Library:executePython"><log>Execute Python: Copy Model</log><stepvalue>Library: _Libraries\Utilities
StepID: 4

import os, shutil, stat

ModelFile = os.path.basename(ModelPath)
ModelName = ModelFile.split(".")[0]

OldModelFolder = os.path.dirname(ModelPath)
NewModelFolder = os.path.join(TestcaseFolder, ModelName)

def CopyFolder(Src, Dst, Replace=True):
    Files = os.listdir(Src)
    if not os.path.exists(Dst):
        os.makedirs(Dst)
        os.chmod(Dst, stat.S_IWRITE)
    for File in Files:
        SrcFile = os.path.join(Src, File)
        DstFile = os.path.join(Dst, File)
        Logging("Copy `%s` to `%s`." % (SrcFile, DstFile))
        if os.path.isdir(SrcFile):
            CopyFolder(SrcFile, DstFile)
        else:
            shutil.copy2(SrcFile, DstFile)
            os.chmod(DstFile, stat.S_IWRITE)

CopyFolder(OldModelFolder, NewModelFolder)

ModelTopologyPath = os.path.join(NewModelFolder, ModelFile)
KeyWords.update({"MODEL_FILE" : ModelName})</stepvalue></entry><entry result="-1" id="16" time="2013/01/23 09:28:28.354"><log>Adding Model Topology from: E:\MKS_TS\flexray\TestData\TEMP\TC00001\ConfigId0_ChA\ConfigId0_ChA.mdl</log></entry><entry result="-1" id="16" time="2013/01/23 09:28:38.555" type="Library:executePython"><log>Execute Python: ConfigurationDesk replace Model Topology</log><stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 30

ModelTopology = Application.Components["ModelTopology"]
try:
    ModelTopologyAnalyze
except:
    ModelTopologyAnalyze = True

Logging("Adding Model Topology from: %s" % (ModelTopologyPath))

ModelTopology.Configure("Replace", [1, "", ModelTopologyPath, ModelTopologyAnalyze, ""])
</stepvalue></entry><entry result="-1" id="18" time="2013/01/23 09:28:39.303" type="Library:executePython"><log>Execute Python: ConfigurationDesk add and connect FlexRay Config and Update block</log><stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 12

ModelTopology = Application.Components.Item("ModelTopology")

def Find(Prefix, Parrent):
    for Child in Parrent:
        if Child.Name.startswith(Prefix) and not Child.IsInApplication:
            return Child
        r = Find(Prefix, Child)
        if r:
            return r
    return None

FlexRayConfigAndUpdateBlock = Find("FLEXRAYCONFIG UPDATE", ModelTopology)
#FlexRayModelPort = Find("FlexRay Model Port", ModelTopology)
FlexRayModelPort = FlexRayConfigAndUpdateBlock[0]

#FlexRayConfigAndUpdateBlock = ModelTopology.Item(ModelName).Item("FLEXRAYCONFIG UPDATE")

FlexRayConfigAndUpdateBlock.IsInApplication = True
FlexRayModelPort.IsInApplication = True

#FlexRayConfigAndUpdateBlockPort = FlexRayConfigAndUpdateBlock[0]

FlexRayFunctionBlockConfigurationPort = FunctionBlock.Item(`FlexRay`).Item(`Configuration`)

Application.ConnectObjects(FlexRayModelPort, FlexRayFunctionBlockConfigurationPort)
</stepvalue></entry><entry result="0" id="13" time="2013/01/23 09:33:25.209" type="question"><log>Enable the Membership ports of the FlexRay Function block.

- FlexRay (1):
    - Common Functions:
        - Memberships: Select All</log><stepvalue>Stop if fail = False
 Jump if crashed = False</stepvalue></entry><entry result="0" id="14" time="2013/01/23 09:33:25.329"><log>Found Property Name with correct value.</log></entry><entry result="0" id="14" time="2013/01/23 09:33:25.442"><log>Found Property RelatedECUs with correct value.</log></entry><entry result="0" id="14" time="2013/01/23 09:33:25.549"><log>Found Property RelatedControllers with correct value.</log></entry><entry result="0" id="14" time="2013/01/23 09:33:25.655"><log>Found Property Name with correct value.</log></entry><entry result="0" id="14" time="2013/01/23 09:33:25.767"><log>Found Property RelatedECUs with correct value.</log></entry><entry result="0" id="14" time="2013/01/23 09:33:25.868"><log>Found Property RelatedControllers with correct value.</log></entry><entry result="-1" id="14" time="2013/01/23 09:33:25.921" type="executePython"><log>Execute Python: Verify Membership Properties</log><stepvalue>Expected = {
    "Membership 1": [
        ("Name", "Membership 1", True),
        ("RelatedECUs", "ECU_1", True),
        ("RelatedControllers", "CTR1", True),
    ],
    "Membership 2": [
        ("Name", "Membership 2", True),
        ("RelatedECUs", "ECU_2", True),
        ("RelatedControllers", "CTR0", True),
    ]
}

for MembershipName, ExpectedProperties in Expected.iteritems():
    try:
        Membership = FunctionBlock["Common Functions"]["Memberships"][MembershipName]
        for Property in ExpectedProperties:
            if (Membership.Properties[Property[0]].Name == Property[0] and
                Membership.Properties[Property[0]].Value == Property[1] and
                Membership.Properties[Property[0]].IsReadOnly == Property[2]):
                Logging("Found Property %s with correct value." % (Property[0], ), OK)
            else:
                Logging("FAILED to find Property %s with correct value." % (Property[0], ), FAIL)
    except:
        Logging("FAILED to find Membership: %s" % (MembershipName, ), FAIL)
</stepvalue></entry><entry result="-1" id="19" time="2013/01/23 09:33:26.291" type="Library:executePython"><log>Execute Python: ConfigurationDesk create Application Process</log><stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 31

Application.Algorithms.CreatePreConfiguredApplicationProcessAutomatically([])</stepvalue></entry><entry result="0" id="21" time="2013/01/23 09:33:26.502"><log>Found property Name with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:26.624"><log>Found property Offset with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:26.736"><log>Found property WCET with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:26.858"><log>Found property Deadline with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:26.963"><log>Found property BaseCycle with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:27.063"><log>Found property CycleRepetition with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:27.171"><log>Found property EndCycle with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:27.273"><log>Found property DataAcquisitionRasterName with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:27.383"><log>Found property IsRealTimeTestingEnabled with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:27.492"><log>Found property NumberOfAcceptedOverruns with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:27.600"><log>Found property Priority with corret value.</log></entry><entry result="0" id="21" time="2013/01/23 09:33:27.737"><log>Found property SchedulingPolicy with corret value.</log></entry><entry result="-1" id="21" time="2013/01/23 09:33:27.800" type="executePython"><log>Execute Python: Check FR Task</log><stepvalue>Expected = [
("Name", "Synchronization task", True),
("Offset", 4899, True),
("WCET", "69", True),
("Deadline", 4968, True),
("BaseCycle", 0, True),
("CycleRepetition", 1, True),
("EndCycle", 63, True),
("DataAcquisitionRasterName", None, False),
("IsRealTimeTestingEnabled", False, False),
("NumberOfAcceptedOverruns", 0, False),
("Priority", 0, True),
("SchedulingPolicy", 1, True),
]

FlexRayElements = Application.Relations["ApplicationConfiguration"].GetElements(FunctionBlock)

for Element in FlexRayElements:
    if Element.Name == "Synchronization task":
        SyncTask = Element

for Name, Value, IsReadOnly in Expected:
    try:
        if ((SyncTask.Properties[Name].Value == Value or SyncTask.Properties[Name].Value[0] == Value) and
            SyncTask.Properties[Name].IsReadOnly == IsReadOnly):
            Logging("Found property %s with corret value." % (Name), OK)
        else:
            Logging("FAILED to find property %s with corret value (%s/%s)." % (Name, SyncTask.Properties[Name].Value,
                    Value), FAIL)
    except:
        Logging("FAILED to find property %s." % (Name, ), FAIL)</stepvalue></entry><entry result="-1" id="23" time="2013/01/23 09:33:29.599" type="Library:executePython"><log>Execute Python: Matlab stop</log><stepvalue>Library: _Libraries\Matlab
StepID: 3

Matlab.Execute("save_system")
Matlab.Execute("bdclose(`all`)")

Matlab = None</stepvalue></entry><entry result="-1" id="6" time="2013/01/23 09:33:32.147" type="Library:executePython"><log>Execute Python: ConfigurationDesk stop</log><stepvalue>Library: _Libraries\ConfigurationDesk
StepID: 3

try:
	SaveChanges
except:
	SaveChanges = True

ConfigurationDesk.Quit(SaveChanges)</stepvalue></entry><result file="APV\SCALEXIO_FlexRay_Plugin\TC00001.LOG.txt" result="1" time="23/01/2013 09:33:32.240"/></logFile>
